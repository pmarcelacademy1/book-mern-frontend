const express = require('express');
const User = require('./user.model');
const bcrypt = require('bcrypt'); // Add bcrypt import
const jwt = require('jsonwebtoken');

const router = express.Router();

const JWT_SECRET = process.env.JWT_SECRET_KEY;

// router.post('/create-admin', async (req, res) => {
//   try {
//     const { username, password, role } = req.body;
//     const user = new User({ username, password, role });
//     await user.save();
//     res.status(201).json({ message: 'Admin created successfully', user });
//   } catch (error) {
//     console.error('Error creating admin:', error);
//     res.status(500).json({ message: 'Failed to create admin' });
//   }
// });

router.post('/admin', async (req, res) => {
  const { username, password } = req.body;
  try {
    const admin = await User.findOne({ username });
    if (!admin) {
      return res.status(404).json({ message: 'Admin not found!' }); // Use json() and return
    }

    const isPasswordValid = await bcrypt.compare(password, admin.password);
    if (!isPasswordValid) {
      return res.status(401).json({ message: 'Invalid password!' }); // Use json() and return
    }

    const token = jwt.sign(
      { id: admin._id, username: admin.username, role: admin.role },
      JWT_SECRET,
      { expiresIn: '1h' }
    );

    return res.status(200).json({
      message: 'Authentication successful',
      token: token,
      user: {
        username: admin.username,
        role: admin.role,
      },
    });
  } catch (error) {
    console.error('Failed to login as admin:', error);
    return res.status(500).json({ message: 'Failed to login as admin' }); // Use 500 for server errors
  }
});

module.exports = router;